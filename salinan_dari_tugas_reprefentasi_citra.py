# -*- coding: utf-8 -*-
"""Salinan dari tugas reprefentasi citra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-nqRpzSmOEnkRvjKcS3NXWZhS8EXHvWq

# Bagian Baru
"""



import numpy as np
import imageio
import matplotlib.pyplot as plt

def load_image(image_path):
    # Muat gambar menggunakan imageio
    return imageio.imread(image_path)

def split_channels(image):
    # Pisahkan channel R, G, B dan buat gambar baru
    R = image[:, :, 0]  # Channel Merah
    G = image[:, :, 1]  # Channel Hijau
    B = image[:, :, 2]  # Channel Biru
    # Buat gambar baru untuk setiap channel
    R_image = np.zeros_like(image)
    G_image = np.zeros_like(image)
    B_image = np.zeros_like(image)

    R_image[:, :, 0] = R
    G_image[:, :, 1] = G
    B_image[:, :, 2] = B

    return R_image, G_image, B_image

"""# Bagian Baru"""

def convert_to_grayscale(image):
    # Konversi ke grayscale menggunakan rumus
    return np.dot(image[..., :3], [0.2989, 0.5870, 0.1140])

def convert_to_binary(gray_image, threshold=127):
    # Konversi gambar grayscale ke biner
    binary_image = (gray_image > threshold) * 255
    return binary_image.astype(np.uint8)

def display_images(images, titles):
    # Tampilkan gambar-gambar dengan judul
    plt.figure(figsize=(15, 10))
    for i in range(len(images)):
        plt.subplot(1, len(images), i + 1)
        plt.imshow(images[i].astype(np.uint8))  # Pastikan tipe data uint8
        plt.title(titles[i])
        plt.axis('off')
    plt.show()

def main():
    # Daftar gambar yang akan diproses
    image_paths = ['/content/daun-pepaya.jpg', '/content/Singkong.jpg', '/content/kembang-kenikir1.jpg']
    for image_path in image_paths:
        image = load_image(image_path)  # Muat gambar
        R_image, G_image, B_image = split_channels(image)  # Pisahkan channel

        # Tampilkan channel RGB
        images_rgb = [R_image, G_image, B_image]
        titles_rgb = ['Channel Merah', 'Channel Hijau', 'Channel Biru']
        display_images(images_rgb, titles_rgb)

        # Konversi dan tampilkan grayscale dan binary
        gray_image = convert_to_grayscale(image)  # Konversi ke grayscale
        binary_image = convert_to_binary(gray_image)  # Konversi ke biner

        # Tampilkan hasil pemrosesan lainnya
        images_gray_binary = [gray_image, binary_image]
        titles_gray_binary = ['Grayscale', 'Binary']
        display_images(images_gray_binary, titles_gray_binary)

# Panggil fungsi utama
main()